函数
    a. 默认参数：
        就是缺省参数(通常放在位置参数的后面部分, 另外默认参数不能放在**kwargs的后面)。当调用该函数时，如果没有为某些形参传递对应的实参，则这些形参会自动使用默认参数值。
    b. 关键字参数：
        在函数调用时除了通过位置关系来体现实参与形参的对应关系的方法(即位置参数)，还有一种使用关键字参数的方法，其形式为"形参=实参"。使用关键字参数调用函数时，实参的传递顺序
        可以与形参列表中形参的顺序不一致。这样当一个函数的很多参数都有默认值，而我们只想对其中一小部分带默认值的参数传递实参时，就可以直接通过关键字参数的方法来进行实参传递，
        而不必考虑这些带默认值的参数在形参列表中的实际位置。例如：
            def si(name, chineselevel='A', country='中国'):
                print('姓名:%s, 中文水平:%s, 国家:%s'%(name, chineselevel, country))
            si('小李')  #chineselevel和country都有默认参数，所以在调用时只给name传递实参。
            si('皮特', country="美国")  #第一个参数使用位置参数形式，第二个参数使用关键字参数形式。位置参数和关键
                                        #字参数可以混合使用，但必须位置参数在前，关键字参数在后。
            si(country='美国', chineselevel='一般'， name='约翰') #把所有的参数都设置为关键字参数的形式
    c. 不定长参数：
        c1. 在调用函数时可以接收任意数量的实参，这些实参在传递给函数时会封装(封包)成元组(位置参数)或字典(关键字参数)形式。一般情况下，不定长参数放在形参列表的最后，前面传入的实
            参与普通形参一一对应，而后面剩下的实参会被封装成元组或字典后传给不定长参数。对于使用位置参数形式的不定长参数，Python也允许将普通形参放在不定长参数的后面，但此时要求在调用
            函数时必须使用关键字参数方式给不定长参数后面的形参传递实参(对于有默认参数的形参，在调用函数时也可以不传入相应实参)。
        c2. 带不定长参数的函数的定义方法如下所示：
            def 函数名([普通形参列表,] *不定长参数名 [,普通形参列表]):  # 不定长参数对应的是一组位置参数
                函数体

            或

            def 函数名([普通形参列表,] **不定长参数名): #不定长参数对应的是一组关键字参数
                函数体
    d. 拆分参数(解包)列表
        如果一个函数所需要的参数已经存储在列表、元组或字典中，就可以直接从列表、元组或字典中拆分出函数所需要的参数，其中列表、元组拆分出来的结果作为位置参数，而字典拆分出来的结果为关键
        字参数。例如：
            def sumval(*args):
                sum = 0
                for i in args:
                    sum+=i
                print('求和结果为 ', sum)
            ls = [3, 5.2, 7, 1]
            sumval(*ls) #等价于sumval(3, 5.2, 7, 1)
    e. 返回值
        e1. 如果在函数中没有显式地写return语句，那么就会隐式地添加一个什么数据都不返回的return语句，即return None(或直接return)
        e2. 通过return不仅能返回数值数据，也可以返回字符串、列表、元组等数据。比如
            def getElements():
                return 1, 2, 3 #返回3个数值数据，实际上这3个数据会打包成一个元组返回，等效于return (1, 2, 3)
    f. 局部变量和全局变量
        f1. 在一个函数中定义的变量就是局部变量(包括形参)，其作用域是从定义局部变量的位置至函数结束的位置。在所有函数外部定义的变量就是局部变量，其在所有函数中都可使用。
        f2. global关键字：要在一个函数中使用global关键字，可以声明在该函数中使用的是全局变量，而非局部变量。比如
                def my_func():
                    global x    #通过global关键字声明为该函数中使用的是全局变量x, 而不是重新定义一个
                    x = 100 #将全局变量x赋为100
            在一个函数中要修改全局变量的值，必须使用global关键字声明使用该全局变量。虽然在不修改全局变量值的情况下可以省略global关键字，但不建议这么做，因为这样会降低程序的可读性。
        f3. nonlocal关键字：在Python中函数的定义可以嵌套，即在一个函数的函数体中可以包含另一个函数的定义。通过nonlocal关键字，可以使内层的函数直接使用外层函数中定义的变量。
                def outer():
                    x = 10 #定义局部变量x并赋值为10
                    def inner():
                        nolocal x #nolcal声明
                        x = 20  #使用外层函数outer中定义的变量x,而不是重新定义一个
                    inner() #在outer函数中调用inner函数
                outer()
        f4. 闭包：如果在内层函数中使用了外层函数的局部变量，并且外层函数的返回值是内层函数的引用，就构成了闭包。定义在外层函数中但由内层函数使用的变量称为自由变量。一般情况下，如果一个
            函数结束，那么该函数中定义的局部变量都会释放。然而闭包是一种特殊情况，外层函数在结束时会发现其定义的局部变量将来会在内层函数中使用，此时外层函数就会把这些自由变量绑定到内层函数。
            因此所谓闭包，实际上就是将内层函数的代码以及自由变量(由外层函数定义，但会由内层函数使用)打包在一起(会将自由变量保存到内部函数的__closure__属性中以供内部函数使用)。
                def outer(x):
                    y = 10
                    def inner(z):
                        nolocal x,y
                        return x+y+z
                    return inner    #返回嵌套函数的inner的引用

    g. lambda函数
        g1. 也称为匿名函数，是一种不使用def定义函数的形式，其作用是能快速定义一个简短的函数。lambda函数的函数体只是一个表达式，所以lambda函数通常只能实现比较简单的功能。
        g2. 匿名函数可以在需要函数对象的任意地方使用(比如赋值给变量，作为参数传入其函数等)，因为匿名函数可以作为一个表达式，而不是一个结构化的代码块。
        g3. lambda后面的参数可以有，也可以没有，并且可以有多个；但是冒号后面的表达式必须有，并且只能有一个。表达式的计算结果即为该lambda函数的返回值。
        g4. 可以将lambda函数赋给一个变量，然后通过该变量调用相应的lambda函数。
    
    h. 函数装饰器(装饰器包括函数装饰器和类装饰器)
        h1. 利用装饰器，可以在不修改已有函数的情况下向已有函数中注入代码，使其具备新的功能。一个装饰器可以为多个函数注入代码，一个函数也可以注入多个装饰器的代码。
            def deco1(func):    #定义一个装饰器(装饰器实际上就是闭包)，在外层函数的形参列表中只有一个形参func,接收要装饰的函数，
                def inner1(*args, **kwargs): 
                    print('deco1 begin')
                    func(*args, **kwargs)   #在内层函数中直接调用func即表示执行所装饰的函数中的代码
                    print('deco1 end')
                return inner1
            def deco2(func):    #定义一个装饰器
                def inner2(*args, **kwargs)
                    print('deco2 begin')
                    func(*args, **kwargs)
                    print('deco2 end')
                return inner2
            #在要装饰的函数前面写上“@装饰器名”即可将装饰器中的代码注入该函数(f1)中,因此下面三行代码，会将deco1中的代码注入f1函数中，deco1中的func(*arg, **kwargs)即对应f1函数的调用。
            @deco1  
            def f1(a, b):   #f1 = inner1
                print('a+b=', a+b)
            # 当一个函数前面有多个“@装饰器名”的时候，将按照从后至前的顺序依次装饰。因此，下面先使用deco2装饰f2函数，即在f2函数的代码前注入print('deco2 begin')，在f2函数的代码后注入
            # print('deco2 end')；然后在前面装饰的基础上使用deco1装饰，即在已装饰代码前注入print('deco1 begin')，在已装饰代码后注入print('deco1 end')。
            @deco1
            @deco2
            def f2(a, b, c):
                print('a+b+c=', a+b+c)
            if __name__ '__main__:
                f1(3, 5)    #在调用f1函数时，会先输出deco1 begin, 再执行f1函数中的代码输出a+b=8,最后输出deco1 end。
                f2(1, 3, 5)

        h2. 上述例子中，f2函数装饰后，其实际执行代码为：
            print('deco1 begin')
            print('deco2 begin')
            print('a+b+c=', a+b+c)
            print('deco2 end')
            print('deco1 end')
        
        h3. 利用装饰器可以将日志处理、执行时间计算等较为通用的代码注入不同的函数中，从而使得代码更简洁。
        h4. 将装饰器内层函数的形参列表写为“*args，**kwargs”，表示要装饰的函数可以具有任意形式的形参列表；当然也可以根据实际情况来，如果要注入函数的形参列表形式固定，也可以不使用这种通用形式。

    i. 函数的特殊形参： /和*
        # 默认情况下，函数的参数传递形式可以是位置参数或是显式的关键字参数也可以用 / 和 * 来限制参数的传递形式。其中 / 为仅限位置参数，限制在它之前的形参必须以位置参数的形式 传入，而不能
        # 用关键字参数；其中 * 为仅限关键字参数，限制在它之后的形参必须以关键字参数的 形式传入。这两个特殊参数只是为了限制参数的传递形式，不需要为它们传入实参
        def func(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
            pass
        func(1, 2, 3, kwd1=4, kwd2=5)
    
    j. 类型标注
        j1. Python 对标注类型并不强制，不按照标注类型也不会报错。
        j2. 类型标注主要被用于第三方工具，比如类型检查器、集成开发环境、 静态检查器等
        j3. 标注以字典的形式存放在函数的 __annotations__ 属性中，不会影响函 数的任何其他部分
        j4. 自从 Python3.5 以来，发布了 typing 包，为类型标注提供了支持

            def func(a: int, b: str, c: list, d: tuple, e: dict, f: set) -> tuple:
                return a, b, c, d, e, f
            print(func(1, 2, 3, 4, 5, 6))
            print(func(1, "2", [3], (4, ), {5: 5}, {6}))
            print(func.__annotations__)
    
            from typing import List, Tuple, Dict, Set, Union, Callable, Iterable, Iterator, Generator
            # List[int]：建议参数为列表，且所有元素为int类型
            # Tuple[int, str]：建议参数为元组，且第一个元素为int类型，第二个元素为str类型
            # Dict[str, int]：建议参数为字典，且所有键为str类型，值为int类型
            # Set[str]：建议参数为集合，且所有元素为str类型
            def func(a: int, b: str, c: List[int], d: Tuple[int, str], e: Dict[str, int], f: Set[str]) -> Tuple:
                return a, b, c, d, e, f
            print(func(1, 2, 3, 4, 5, 6))
            print(func(1, "2", [3, 4, 5], (4, "5"), {"5": 4}, {"6"}))
    
    
            # 嵌套
            def func(a: Dict[str, List[Tuple[int, int, int]]]):
                pass
            # 建议多种类型(这里的UNION表示选择其中之一)
            def func(a: Union[str, list, set]):
                pass
            func({})
            func([1])
            func("1")
            func({1})

        # Callable[[int], int] 建议参数为函数，且只有一个为int类型的参数，返回int类型
        def my_sort(a: list, f: Callable[[int], int], c: bool):
            return sorted(a, key=f, reverse=c)
        print(my_sort([1, -3, 2], abs, True))
